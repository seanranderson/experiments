function Audiogram(hndl,start)
    % User GUI for familarization protocol
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Show Experimental Screen, Run Experiment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ~exist('start','var')
    start = 0;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% open experimental screen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ~start
    hndl.ExpFig = figure('name','Audiogram',...
        'numbertitle','off',...
        'MenuBar','none',...
        'Visible','on','Units','normalized','Position',[0.,0.,1,1]);
    
    hndl.colors.white=[1 1 1];
%     hndl.colors.gray = [0.9255 0.9137 0.8471];
    hndl.colors.green = [0.5 1 0.25];
    hndl.colors.blue = [0.5 0.5 1];
    hndl.colors.red = [1 0.25 0.25];
    hndl.colors.gray = [0.8 0.8 0.8];
    hndl.colors.orange = [0.947 0.686 0.098];
    hndl.colors.gray = [0.937254902 0.937254902 0.937254902];
end

if start == 1
        str.data = {'Now we will test your hearing.',...
            ' ',...
            'On each trial, we will present 1, 2, or 3 beeps.',...
            'The bar on the left or right indicates the pitch.',...
            'Please respond with the number of beeps'...
            "you believe you heard. If you're not sure, just guess.",...
            ' ',...
            'If anything is unclear, please press the "Help" button ',...
            'on the bottom left. When you are ready,',...
            'click the "Next" button below.'};
        str.pos = [0.2 0.3];
        str.siz = [0.6 0.35];

        GenGUI(str);
else

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Experiment Parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %     hndl = get(gcf, 'UserData');

    % STIMULUS
    % Hard-coded stimulus parameters
    
    hndl.SRate = 44100;             % Sampling rate in Hz
    hndl.StartLevel = 9;            % in step numbers (LevelCalibration.m)
    hndl.MinLevel = 1;              % in step numbers (LevelCalibration.m)
    hndl.PipDur = 0.3;              % Tone pip duration in sec
    hndl.ISI = 0.2;                 % Inter-stimulus interval in sec
    hndl.RampDur = 0.01;               % Pip onset/offset ramp duration in sec
    hndl.nFreq = 6;                 % Number of frequencies tested
    
    % INITIATILIZATIONS
    % Variables required on each trial
    
    hndl.Level = hndl.StartLevel;   % Initiate at starting level
    hndl.Ear = 1;                   % Left = 1, Right = 2
    hndl.FreqIdx = 1;                  % Index of frequency
    hndl.nBeeps = randperm(3,1);    % Number of beeps on trial
    hndl.Correct = zeros(...        % initiate vector for correct trials
        hndl.StartLevel - ...
        hndl.MinLevel + 1, 1);        
    hndl.TrialCount = zeros(...     % initiate vector for number of trials
        hndl.StartLevel - ...
        hndl.MinLevel + 1, 1);      
    
    % BUTTONS
    % Parameters guiding how GUI buttons will be set up
    
    xoffset = 0.2;
    yoffset = 0.0;
    nButtons = 3;
    widthButton = (1 - 2*xoffset)/nButtons;
    heightButton = 0.2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% set up experimental screen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    uicontrol('Style','text','String','', ...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.gray,...
        'FontSize',10,...
        'Units', 'normalized',...
        'Position',[0.0 0.0 1.0 1.0]);

    uicontrol('Style','text','String','I heard:', ...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.gray,...
        'FontSize',40,...
        'Units', 'normalized',...
        'Position',[xoffset+nButtons/2*widthButton-widthButton/2,...
            yoffset+2.25*heightButton,...
            widthButton,0.075]);

    uicontrol('Style','text','String','beeps.', ...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.gray,...
        'FontSize',40,...
        'Units', 'normalized',...
        'Position',[xoffset+nButtons/2*widthButton-widthButton/2,...
            yoffset + heightButton/2,...
            widthButton,0.075]);

    hndl.ExpButtons.Play = uicontrol('Style', 'pushbutton', ...
        'String', 'Play', ...
        'FontWeight', 'bold', ...
        'FontSize', 40, ...
        'Enable','on',...
        'backgroundcolor',hndl.colors.green, ...
        'callback',{@Play}, ...
        'Units', 'normalized', 'Position',[0.33,0.65,0.33,0.15]);

% % % %     hndl.ExpButtons.Stop = uicontrol('Style', 'pushbutton', 'String', 'Abort', ...
% % % %         'FontWeight', 'bold', ...
% % % %         'FontSize', 14, ...
% % % %         'backgroundcolor',[1 0.1 0.1], ...
% % % %         'callback',{@StopExp,0}, ...
% % % %         'Units', 'normalized', 'Position',[0.885,0.025,0.1,0.05]);

    hndl.ExpButtons.Button1 = uicontrol('Style', 'pushbutton', ...
        'FontWeight', 'bold', ...
        'String','1',...
        'FontSize', 40, ...
        'backgroundcolor',hndl.colors.blue, ...
        'Enable','off', ...
        'callback',{@UpdateResponse,1}, ...
        'Units', 'normalized',...
        'Position',[xoffset,yoffset+heightButton,...
            widthButton,heightButton]);

    hndl.ExpButtons.Button2 = uicontrol('Style', 'pushbutton', ...
        'FontWeight', 'bold', ...
        'String','2',...
        'FontSize', 40, ...
        'backgroundcolor',hndl.colors.blue, ...
        'Enable','off', ...
        'callback',{@UpdateResponse,2}, ...
        'Units', 'normalized',...
        'Position',[xoffset+widthButton,yoffset+heightButton,...
            widthButton,heightButton]);

    hndl.ExpButtons.Button3 = uicontrol('Style', 'pushbutton', ...
        'FontWeight', 'bold', ...
        'String','3',...
        'FontSize', 40, ...
        'backgroundcolor',hndl.colors.blue, ...
        'Enable','off', ...
        'callback',{@UpdateResponse,3}, ...
        'Units', 'normalized',...
        'Position',[xoffset+2*widthButton,yoffset+heightButton,...
            widthButton,heightButton]);

    % Color bar (button groups)
    hndl.ColorBar.Left = uibuttongroup('Units', 'Normalized',...
        'backgroundcolor',hndl.colors.gray,...
        'Position',[0.0 0.0 0.2 1]);
    uicontrol('Style','text','String','Left Ear', ...
        'Parent',hndl.ColorBar.Left,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.gray,...
        'FontSize',20,...
        'Units', 'normalized',...
        'Position',[0.1 0.9 0.8 0.1]);
    uicontrol('Style','text','String','Low Pitch', ...
        'Parent',hndl.ColorBar.Left,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.gray,...
        'FontSize',20,...
        'Units', 'normalized',...
        'Position',[0.1 0.05 0.8 0.1]);
    uicontrol('Style','text','String','High Pitch', ...
        'Parent',hndl.ColorBar.Left,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.gray,...
        'FontSize',20,...
        'Units', 'normalized',...
        'Position',[0.1 0.85 0.8 0.1]);
    uicontrol('Style','text','String','', ...
        'Parent',hndl.ColorBar.Left,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.white,...
        'FontSize',10,...
        'Units', 'normalized',...
        'Position',[0.3 0.2 0.34 0.7]);
    uicontrol('Style','text','String','', ...
        'Parent',hndl.ColorBar.Left,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.orange,...
        'FontSize',10,...
        'Units', 'normalized',...
        'Position',[0.32 0.2 0.3 0.7/hndl.nFreq]);
    
    hndl.ColorBar.Right = uibuttongroup('Units', 'Normalized',...
        'backgroundcolor',hndl.colors.gray,...
        'Position',[0.8 0.0 0.2 1]);
    uicontrol('Style','text','String','Right Ear', ...
        'Parent',hndl.ColorBar.Right,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.gray,...
        'FontSize',20,...
        'Units', 'normalized',...
        'Position',[0.1 0.9 0.8 0.1]);
    uicontrol('Style','text','String','Low Pitch', ...
        'Parent',hndl.ColorBar.Right,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.gray,...
        'FontSize',20,...
        'Units', 'normalized',...
        'Position',[0.1 0.05 0.8 0.1]);
    uicontrol('Style','text','String','High Pitch', ...
        'Parent',hndl.ColorBar.Right,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.gray,...
        'FontSize',20,...
        'Units', 'normalized',...
        'Position',[0.1 0.85 0.8 0.1]);
    uicontrol('Style','text','String','', ...
        'Parent',hndl.ColorBar.Right,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.white,...
        'FontSize',10,...
        'Units', 'normalized',...
        'Position',[0.3 0.2 0.34 0.7]);
    uicontrol('Style','text','String','', ...
        'Parent',hndl.ColorBar.Right,...
        'FontWeight', 'bold', ...
        'backgroundcolor',hndl.colors.orange,...
        'FontSize',10,...
        'Units', 'normalized',...
        'Position',[0.32 0.2 0.3 0.7/hndl.nFreq]);
    set(hndl.ColorBar.Right,'visible','off');
    
    hndl.ExpButtons.GetHelp = uicontrol('Style', 'pushbutton', 'String', 'Help', ...
        'FontWeight', 'bold', ...
        'FontSize', 8, ...
        'FontUnits','normalized',...
        'backgroundcolor',[1 0.1 0.1], ...
        'callback',{@Help,0}, ...
        'Units', 'normalized', 'Position',[0.4,0.025,0.1,0.052]);

    if ~isfield(hndl,'SubID')
        hndl.SubID = 'AAA';
    end
    hndl.fid = fopen(sprintf('%s_RawAudiogramResponses.txt',hndl.SubID),'w');
    fprintf(hndl.fid,'ID,Ear,Freq,Level,Correct,RTsec\n');
    
    set(gcf, 'UserData', hndl);
    
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Subfunctions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Calculate next trial
function UpdateResponse(obj,events,input)

    hndl = get(gcf, 'UserData');
    
    hndl.RTsec = toc;
    
    finishedFlag = 0;

    % Enable response buttons
    set(hndl.ExpButtons.Button1,'Enable','off');
    set(hndl.ExpButtons.Button2,'Enable','off');
    set(hndl.ExpButtons.Button3,'Enable','off');
    
    buttonData = input; % eval(sprintf('get(hndl.ExpButtons.Button%d);',input));

    % Check response for accuracy
    correctTrial = (buttonData == hndl.nBeeps);
    % Write output of trial
    if hndl.Ear == 1
        Ear = 'L';
    elseif hndl.Ear == 2
        Ear = 'R';
    end
    fprintf(hndl.fid,'%s,%s,%d,%d,%d,%0.2f\n',...
        hndl.SubID,Ear,hndl.TrialFreq,hndl.TrialdBHL,correctTrial,hndl.RTsec);
    
    if correctTrial
        % right!
        hndl.Correct(hndl.Level) = ...
            hndl.Correct(hndl.Level) + 1;
    else
        % wrong...
        hndl.Correct(hndl.Level) = ...
            hndl.Correct(hndl.Level);
    end

    % Determine if threshold has been identified
        % yes
    if (any(hndl.Correct ./ hndl.TrialCount >= 0.7) && ... % at least 3/4
            any(hndl.TrialCount >= 3) && ... % at least 3 trials
            hndl.Level ~= hndl.StartLevel) ... % not highest level
            || (hndl.Level == hndl.StartLevel && ... % OR max level
            hndl.TrialCount(hndl.StartLevel) >= 3) % at least 3 trials
            
        % Calc threshold
        [~,hndl.Threshold(hndl.FreqIdx,hndl.Ear)] = ...
            LevelCalibrations(hndl.Level,hndl.FreqIdx,hndl.Ear);
         
        if hndl.FreqIdx == hndl.nFreq && hndl.Ear == 2
            finishedFlag = 1;
            
            % Close raw data file
            fclose(hndl.fid);
            
            % Write out thresholds
            fid = fopen(sprintf('%s_AudiogramThresholds',hndl.SubID),'w');
            fprintf(fid,'ID,Ear,Freq,Threshold_dBHL\n');
            for ii = 1:2
                for jj = 1:hndl.nFreq
                    [~,cf] = MakeTonalStim(hndl.SRate,hndl.PipDur,hndl.ISI,hndl.RampDur,jj,ii,1,1);
                    if ii == 1
                        Ear = 'L';
                    elseif ii == 2
                        Ear = 'R';
                    end
                    fprintf(fid,'%s,%s,%d,%d\n',hndl.SubID,Ear,cf,hndl.Threshold(jj,ii));
                end
            end
            fclose(fid);
            
            % Move to next task
            hndl.npanel = hndl.npanel + 1;
            set(gcf, 'UserData', hndl);
            WelcomeScreenHomeDelivery([],[],hndl.npanel);
            
        elseif hndl.FreqIdx == hndl.nFreq
            % Begin testing right ear
            hndl.FreqIdx = 1;
            hndl.Ear = 2;
            hndl.Level = hndl.StartLevel;
            hndl.Correct = zeros(hndl.StartLevel - hndl.MinLevel + 1, 1);
            hndl.TrialCount = zeros(hndl.StartLevel - hndl.MinLevel + 1, 1);
            set(hndl.ColorBar.Left,'visible','off');
            set(hndl.ColorBar.Right,'visible','on');
            
            % Enable play button
            set(hndl.ExpButtons.Play,'BackgroundColor',hndl.colors.green);        
            set(hndl.ExpButtons.Play,'Enable','on');
            
        else
            if hndl.Ear == 1
                % Update color bar 
                uicontrol('Style','text','String','', ...
                    'Parent',hndl.ColorBar.Left,...
                    'FontWeight', 'bold', ...
                    'backgroundcolor',hndl.colors.orange,...
                    'FontSize',10,...
                    'Units', 'normalized',...
                    'Position',[0.32 0.2 ...
                    0.3 0.7*(hndl.FreqIdx+1)/hndl.nFreq]);
            elseif hndl.Ear == 2
                % Update color bar 
                uicontrol('Style','text','String','', ...
                    'Parent',hndl.ColorBar.Right,...
                    'FontWeight', 'bold', ...
                    'backgroundcolor',hndl.colors.orange,...
                    'FontSize',10,...
                    'Units', 'normalized',...
                    'Position',[0.32 0.2 ...
                    0.3 0.7*(hndl.FreqIdx+1)/hndl.nFreq]);
            end
            
            % Begin testing next freq
            hndl.FreqIdx = hndl.FreqIdx + 1;
            hndl.Level = hndl.StartLevel;
            hndl.Correct = zeros(hndl.StartLevel - hndl.MinLevel + 1, 1);
            hndl.TrialCount = zeros(hndl.StartLevel - hndl.MinLevel + 1, 1);
            
            % Enable play button
            set(hndl.ExpButtons.Play,'BackgroundColor',hndl.colors.green);        
            set(hndl.ExpButtons.Play,'Enable','on');
            
        end
        
        % no
    else
        
        % Update level
        if correctTrial
            hndl.Level = hndl.Level - 2;
            
            if hndl.Level < hndl.MinLevel
                hndl.Level = hndl.MinLevel;
            end
            
        else % incorrect trial
            hndl.Level = hndl.Level + 1;
        
            if hndl.Level > hndl.StartLevel
                hndl.Level = hndl.StartLevel;
            end
        end
        
        % Determine number of beeps for next trial
        hndl.nBeeps = randperm(3,1);
        
        % Enable play button
        set(hndl.ExpButtons.Play,'BackgroundColor',hndl.colors.green);        
        set(hndl.ExpButtons.Play,'Enable','on');
        
    end

    if finishedFlag
        % do NOT assign values to hndl
    else
        % Assign data to hndl
        set(gcf, 'UserData', hndl);
    end

end
    
%% Play stimulus on press of green button
function Play(~,~,~)

    hndl = get(gcf, 'UserData'); % get variables structure

    % Disable play button
    set(hndl.ExpButtons.Play,'BackgroundColor',[1 1 1]);        
    set(hndl.ExpButtons.Play,'Enable','off');
    
    % Update trial number
    hndl.TrialCount(hndl.Level) = hndl.TrialCount(hndl.Level) + 1;
    
    [RMS,hndl.TrialdBHL] = LevelCalibrations(hndl.Level,hndl.FreqIdx,hndl.Ear);
    [hndl.Stim,hndl.TrialFreq] = MakeTonalStim(hndl.SRate,hndl.PipDur,hndl.ISI,hndl.RampDur,...
        hndl.FreqIdx,hndl.Ear,RMS,hndl.nBeeps);
    
    sound(hndl.Stim,hndl.SRate);
    pause(length(hndl.Stim)/hndl.SRate);
    tic;
    
    % Enable response buttons
    set(hndl.ExpButtons.Button1,'Enable','on');
    set(hndl.ExpButtons.Button2,'Enable','on');
    set(hndl.ExpButtons.Button3,'Enable','on');

    set(gcf, 'UserData', hndl);

end

%% Stops/abort experiment
% % function StopExp(obj,events,type)    
% %     hndl = get(gcf, 'UserData'); % get variables structure
% %     close(hndl.ExpFig);
% %     fclose(hndl.fid);
% %     hndl.RunNum = hndl.RunNum + 1;
% %     set(hndl.Fig.RunNum,'string',num2str(hndl.RunNum));
% %     set(gcf, 'UserData', hndl);
% % end